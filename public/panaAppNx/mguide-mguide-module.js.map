{"version":3,"sources":["./src/app/mguide/mguide.component.html","./src/app/mguide/new-appointment/new-appointment.component.html","./src/app/mguide/mguide.component.scss","./src/app/mguide/mguide.component.ts","./src/app/mguide/mguide.module.ts","./src/app/mguide/new-appointment/new-appointment.component.scss","./src/app/mguide/new-appointment/new-appointment.component.ts"],"names":[],"mappings":"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","file":"mguide-mguide-module.js","sourcesContent":["module.exports = \"<mat-tab-group mat-stretch-tabs backgroundColor=\\\"primary\\\" color=\\\"accent\\\" id='mguide'>\\n  <mat-tab label=\\\"Nueva Cita\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-between center\\\" fxLayoutGap=\\\"16px\\\"\\n    *ngIf=\\\"!isDoctor\\\">\\n    <div class=\\\"loading-shade\\\" *ngIf=\\\"($loading | async)\\\">\\n      <mat-spinner></mat-spinner>\\n    </div>\\n\\n    <mat-card id=\\\"search-bar\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\" fxLayoutGap=\\\"16px\\\">\\n\\n      <mat-form-field fxFlex=\\\"95%\\\" fxFlexFill>\\n        <input matInput [(ngModel)]=\\\"searchValue\\\" placeholder=\\\"Buscar Doctor por especialidad\\\">\\n      </mat-form-field>\\n      <button mat-icon-button (click)=\\\"search()\\\">\\n        <mat-icon matPrefix>search</mat-icon>\\n      </button>\\n    </mat-card>\\n\\n    <ui-card-doctor *ngFor=\\\"let doctor of $doctorList | async as list\\\" [doctor]=\\\"doctor\\\"\\n      (appointment)=\\\"scheduleAppointment($event)\\\" (newReview)=\\\"newReview($event)\\\" (redirect)=\\\"moreInfo($event)\\\">\\n    </ui-card-doctor>\\n  </mat-tab>\\n  <mat-tab label=\\\"Citas Programadas\\\" style.height=\\\"100%\\\">\\n    <div class=\\\"loading-shade\\\" *ngIf=\\\"($loading | async)\\\">\\n      <mat-spinner></mat-spinner>\\n    </div>\\n\\n    <ng-container *ngIf=\\\"appointments.length; else noAppointments\\\">\\n      <ui-card-appointment *ngFor=\\\"let appointment of appointments\\\" [appointment]=\\\"appointment\\\" [patient]=\\\"user\\\"\\n        (canceled)=\\\"cancelAppointment($event)\\\" (rescheduled)=\\\"reschedule($event)\\\">\\n      </ui-card-appointment>\\n    </ng-container>\\n    <ng-template #noAppointments>\\n      <h4>No tiene citas medicas agendadas.</h4>\\n    </ng-template>\\n\\n  </mat-tab>\\n</mat-tab-group>\"","module.exports = \"<mat-card class=\\\"card-schedule-appointment\\\">\\n  <mat-card-header>\\n    <mat-card-title>{{isNewAppointment?'Programar Cita':'Reprogramar Cita'}}</mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around center\\\" fxLayoutGap=\\\"16px\\\">\\n    <div class=\\\"loading-shade\\\" *ngIf=\\\"($loading | async)\\\">\\n      <mat-spinner></mat-spinner>\\n    </div>\\n\\n    <mat-form-field class=\\\" symptoms-chip-list chip-list\\\" *ngIf=\\\"isNewAppointment\\\">\\n      <mat-chip-list #chipList aria-label=\\\"Que sintomas presenta\\\">\\n        <mat-chip *ngFor=\\\"let s of symptoms\\\" [selectable]=\\\"true\\\" [removable]=\\\"true\\\" (removed)=\\\"remove(s)\\\">\\n          {{s}}\\n          <mat-icon matChipRemove>cancel</mat-icon>\\n        </mat-chip>\\n        <input placeholder=\\\"Nuevo sintoma\\\" #symptomInput [formControl]=\\\"symptomCtrl\\\" [matAutocomplete]=\\\"auto\\\"\\n          [matChipInputFor]=\\\"chipList\\\" [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\n          [matChipInputAddOnBlur]=\\\"addOnBlur\\\" (matChipInputTokenEnd)=\\\"add($event)\\\">\\n      </mat-chip-list>\\n      <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"selected($event)\\\">\\n        <mat-option *ngFor=\\\"let symp of filteredSymptoms | async\\\" [value]=\\\"symp\\\">\\n          {{symp}}\\n        </mat-option>\\n      </mat-autocomplete>\\n    </mat-form-field>\\n    <!-- <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\" fxLayoutGap=\\\"16px\\\"> -->\\n    <mat-form-field class=\\\"example-full-width\\\" fxFlex=\\\"50%\\\" fxFlexFill>\\n      <input matInput [matDatepicker]=\\\"datePicker\\\" placeholder=\\\"Elegir Fecha\\\" [formControl]=\\\"date\\\">\\n      <mat-datepicker-toggle matSuffix [for]=\\\"datePicker\\\"></mat-datepicker-toggle>\\n      <mat-datepicker #datePicker></mat-datepicker>\\n    </mat-form-field>\\n    <mat-form-field fxFlex=\\\"50%\\\" fxFlexFill>\\n      <mat-label>Elegir Hora</mat-label>\\n      <input matInput [ngxTimepicker]=\\\"timePicker\\\" placeholder=\\\"Elegir Hora\\\">\\n      <ngx-material-timepicker #timePicker [minutesGap]=\\\"15\\\" (timeSet)=\\\"changeTime($event)\\\">\\n      </ngx-material-timepicker>\\n    </mat-form-field>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <button mat-button (click)=\\\"goBack()\\\">Cancelar\\n      {{isNewAppointment?'cita':'reprogramacion'}}</button>\\n    <button [disabled]='!isValid' mat-button (click)=\\\"cta($event)\\\">{{isNewAppointment?'Agendar':'Reprogramar'}}\\n      cita</button>\\n  </mat-card-actions>\\n</mat-card>\"","module.exports = \"#mguide #search-bar {\\n  padding: 0px 24px;\\n}\\n#mguide .mat-tab-body-content {\\n  height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuZ2Vsb2Fjci9Qcm95ZWN0b3MvUGFuYURvYy9QYW5hZG9jTngvYXBwcy9wYW5hZG9jL3NyYy9hcHAvbWd1aWRlL21ndWlkZS5jb21wb25lbnQuc2NzcyIsImFwcHMvcGFuYWRvYy9zcmMvYXBwL21ndWlkZS9tZ3VpZGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0U7RUFDRSxpQkFBQTtBQ0FKO0FERUU7RUFDRSxZQUFBO0FDQUoiLCJmaWxlIjoiYXBwcy9wYW5hZG9jL3NyYy9hcHAvbWd1aWRlL21ndWlkZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNtZ3VpZGV7XG4gICNzZWFyY2gtYmFyIHtcbiAgICBwYWRkaW5nOiAwcHggMjRweDtcbiAgfVxuICAubWF0LXRhYi1ib2R5LWNvbnRlbnR7XG4gICAgaGVpZ2h0OjEwMCU7XG5cbiAgfVxufSIsIiNtZ3VpZGUgI3NlYXJjaC1iYXIge1xuICBwYWRkaW5nOiAwcHggMjRweDtcbn1cbiNtZ3VpZGUgLm1hdC10YWItYm9keS1jb250ZW50IHtcbiAgaGVpZ2h0OiAxMDAlO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { PanaState, loadingSelector } from '../reducers';\nimport { User, determineIfUserIsDoctor, Doctor, Appointment, UserType } from '@panadoc/data';\nimport { Observable, of } from 'rxjs';\nimport { MguideService } from './mguide.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  templateUrl: './mguide.component.html',\n  styleUrls: ['./mguide.component.scss']\n})\nexport class MguideComponent implements OnInit {\n  isDoctor: boolean;\n  $doctorList: Observable<Array<Doctor>>;\n  user: User;\n  $loading = of(false);\n  isAppointmentsView: boolean;\n  searchValue = '';\n  appointments: Array<Appointment> = [];\n  constructor(\n    private store: Store<PanaState>,\n    private http: MguideService,\n    private route: ActivatedRoute,\n    private router: Router,\n  ) { }\n  ngOnInit() {\n    this.$loading = this.store.select(loadingSelector);\n    this.store.pipe(select('auth')).subscribe((user: User) => {\n      this.isDoctor = determineIfUserIsDoctor(user);\n      this.user = user;\n      if ([UserType.DOCTOR, UserType.PATIENT].some(f => f === user.type)) {\n        //@ts-ignore\n        this.appointments = (user as Doctor).appointments;\n      }\n      this.http.token = user.token;\n    });\n    this.search();\n  }\n  search() {\n    this.$doctorList = this.http.getDoctors(this.searchValue).pipe(map(s => (s as Doctor[])));\n  }\n  reschedule(appointment) {\n    this.router.navigate([`/agenda/reagendar-cita/${appointment.uid}`])\n    //TODO: Retorna a pantalla de citas programadas despues de hacer la llamada\n  }\n  cancelAppointment(appointment) {\n    this.http.deleteAppointment(appointment.uid).subscribe(v => console.log(v));\n  }\n  scheduleAppointment(doctor) {\n    this.router.navigate([`/agenda/nueva-cita/${doctor.uid}`])\n  }\n  newReview(review) {\n    this.http.postReview(review).subscribe(v => console.log(v))\n  }\n  moreInfo(doctorId) {\n    this.router.navigate([`/doctor/${doctorId}`])\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerModule, NgxMaterialTimepickerComponent } from 'ngx-material-timepicker';\n\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from 'libs/ui/src/lib/material.module';\nimport { UiModule } from '@panadoc/ui';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NewAppointmentComponent } from './new-appointment/new-appointment.component';\nimport { MguideComponent } from './mguide.component';\n\n@NgModule({\n  declarations: [\n    NewAppointmentComponent,\n    MguideComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      { path: '', component: MguideComponent },\n      { path: 'nueva-cita/:doctorId', component: NewAppointmentComponent },\n      { path: 'reagendar-cita/:appointmentId', component: NewAppointmentComponent },\n\n    ]),\n    ReactiveFormsModule,\n    FormsModule,\n    FlexLayoutModule,\n    MaterialModule,\n    NgxMaterialTimepickerModule.setLocale('es-VE'),\n    UiModule,\n  ]\n})\nexport class MguideModule { }\n","module.exports = \".card-schedule-appointment mat-card-content {\\n  padding: 1rem 3rem;\\n}\\n.card-schedule-appointment mat-card-content .chip-list {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuZ2Vsb2Fjci9Qcm95ZWN0b3MvUGFuYURvYy9QYW5hZG9jTngvYXBwcy9wYW5hZG9jL3NyYy9hcHAvbWd1aWRlL25ldy1hcHBvaW50bWVudC9uZXctYXBwb2ludG1lbnQuY29tcG9uZW50LnNjc3MiLCJhcHBzL3BhbmFkb2Mvc3JjL2FwcC9tZ3VpZGUvbmV3LWFwcG9pbnRtZW50L25ldy1hcHBvaW50bWVudC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRTtFQUNFLGtCQUFBO0FDQUo7QURFSTtFQUNFLFdBQUE7QUNBTiIsImZpbGUiOiJhcHBzL3BhbmFkb2Mvc3JjL2FwcC9tZ3VpZGUvbmV3LWFwcG9pbnRtZW50L25ldy1hcHBvaW50bWVudC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jYXJkLXNjaGVkdWxlLWFwcG9pbnRtZW50IHtcbiAgbWF0LWNhcmQtY29udGVudCB7XG4gICAgcGFkZGluZzogMXJlbSAzcmVtO1xuXG4gICAgLmNoaXAtbGlzdCB7XG4gICAgICB3aWR0aDogMTAwJVxuICAgIH1cbiAgfVxufSIsIi5jYXJkLXNjaGVkdWxlLWFwcG9pbnRtZW50IG1hdC1jYXJkLWNvbnRlbnQge1xuICBwYWRkaW5nOiAxcmVtIDNyZW07XG59XG4uY2FyZC1zY2hlZHVsZS1hcHBvaW50bWVudCBtYXQtY2FyZC1jb250ZW50IC5jaGlwLWxpc3Qge1xuICB3aWR0aDogMTAwJTtcbn0iXX0= */\"","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, UrlSegment } from '@angular/router';\nimport { MguideService } from '../mguide.service';\nimport { Observable, of } from 'rxjs';\n\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { FormControl } from '@angular/forms';\nimport { MatAutocompleteSelectedEvent, MatAutocomplete } from '@angular/material/autocomplete';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { map, startWith } from 'rxjs/operators';\nimport { DateTime } from 'luxon';\nimport { PanaState } from '../../reducers';\nimport { Store, select } from '@ngrx/store';\nimport { User } from '@panadoc/data';\n\n@Component({\n  templateUrl: './new-appointment.component.html',\n  styleUrls: ['./new-appointment.component.scss']\n})\nexport class NewAppointmentComponent implements OnInit {\n  isNewAppointment: boolean = true;\n  @ViewChild('symptomInput', { static: false }) symptomInput: ElementRef<HTMLInputElement>;\n  @ViewChild('auto', { static: false }) matAutocomplete: MatAutocomplete;\n  selectable = true;\n  removable = true;\n  addOnBlur = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  symptomCtrl = new FormControl();\n  $loading = of(false);\n  filteredSymptoms: Observable<string[]>;\n  allSymptoms: string[] = [];\n  symptoms: string[] = [];\n\n  date = new FormControl(new Date());\n  hour = new Date();\n  isValid = false;\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private http: MguideService,\n    private store: Store<PanaState>\n  ) {\n    this.store.pipe(select('auth')).subscribe((auth: User) => {\n      this.http.token = auth.token;\n    });\n    this.filteredSymptoms = this.symptomCtrl.valueChanges.pipe(\n      startWith(null),\n      map((symp: string | null) => symp ? this._filter(symp) : this.allSymptoms.slice()));\n\n  }\n  changeTime(newTime: string) {\n    this.hour = new Date()//newTime;\n    this.isValid = true;\n  }\n  ngOnInit() {\n    this.http.getSymptoms().subscribe((s: string[]) => {\n      this.allSymptoms = s\n    });\n    this.route.paramMap.subscribe((params) => {\n\n      if (params.has('doctorId')) {\n        this.isNewAppointment = true;\n        const doctorId = params.get('doctorId');\n      }\n      if (params.has('appointmentId')) {\n        this.isNewAppointment = false;\n        const doctorId = params.get('appointmentId');\n      }\n    });\n  }\n  cta(data) {\n    //TODO: Improve sending data;\n    if (this.isNewAppointment) {\n      this.http\n        .postAppointment({ hour: this.hour, symptoms: this.symptoms, date: this.date.value })\n        .subscribe(v => console.log(v));\n    } else {\n      // this.http.putAppointment(this.appointment, { hour: this.hour, date: this.date.value })\n      //   .subscribe(v => console.log(v));\n    }\n    const newSymptoms = this.symptoms.filter(f => !this.allSymptoms.includes(f));\n    if (newSymptoms.length > 0) this.http.postSymptoms(newSymptoms).subscribe(v => console.log(v));\n    this.goBack();\n\n  }\n\n  goBack() {\n    this.router.navigateByUrl('/agenda');\n  }\n  add(event: MatChipInputEvent): void {\n\n    if (!this.matAutocomplete.isOpen) {\n      const input = event.input;\n      const value = event.value;\n\n      if ((value || '').trim()) {\n        this.symptoms.push(value.trim());\n      }\n\n      if (input) {\n        input.value = '';\n      }\n\n      this.symptomCtrl.setValue(null);\n    }\n  }\n\n  remove(symptom: string): void {\n    const index = this.symptoms.indexOf(symptom);\n\n    if (index >= 0) {\n      this.symptoms.splice(index, 1);\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.symptoms.push(event.option.viewValue);\n    this.symptomInput.nativeElement.value = '';\n    this.symptomCtrl.setValue(null);\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.allSymptoms.filter(symp => symp.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}"],"sourceRoot":"webpack:///"}